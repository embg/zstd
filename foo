 *
OVERVIEW
*** OVERVIEW ***
This API allows users to replace the zstd internal block-level matchfinder
with an external matchfinder function. Potential applications of the API
include hardware-accelerated matchfinders and matchfinders specialized to
@@ -2701,7 +2701,7 @@ ZSTDLIB_STATIC_API size_t ZSTD_insertBlock    (ZSTD_DCtx* dctx, const void* bloc
See contrib/externalMatchfinder for an example program employing the
external matchfinder API.
 *
USAGE
*** USAGE ***
The user is responsible for implementing a function of type
ZSTD_externalMatchFinder_F. For each block, zstd will pass the following
arguments to the user-provided function:
 *
  - externalMatchState: a pointer to a user-managed state for the external
    matchfinder.
 *
  - outSeqs, outSeqsCapacity: an output buffer for sequences produced by the
    external matchfinder. outSeqsCapacity is guaranteed >=
    ZSTD_sequenceBound(srcSize). The memory backing outSeqs is managed by
    the CCtx.
 *
  - src, srcSize: an input buffer which the external matchfinder must parse
    into sequences. srcSize is guaranteed to be <= ZSTD_BLOCKSIZE_MAX.
 *
  - dict, dictSize: a history buffer, which may be empty, which the external
    matchfinder may reference as it produces sequences for the src buffer.
    Currently, zstd will always pass dictSize == 0 into external matchfinders,
    but this will change in the future.
 *
  - compressionLevel: a signed integer representing the zstd compression level
    set by the user for the current operation. The external matchfinder may
    choose to use this information to change its compression strategy and
    speed/ratio tradeoff. Note: The compression level does not reflect zstd
    parameters set through the advanced API.
 *
  - windowSize: a size_t representing the maximum allowed offset for external
    sequences. Note that sequence offsets are sometimes allowed to exceed the
    windowSize if a dictionary is present, see doc/zstd_compression_format.md
    for details.
 *
The user-provided function shall return a size_t representing the number of
sequences written to outSeqs. This return value will be treated as an error
code if it is greater than outSeqsCapacity. The return value must be non-zero
if srcSize is non-zero. The ZSTD_EXTERNAL_MATCHFINDER_ERROR macro is provided
for convenience, but any value greater than outSeqsCapacity will be treated as
an error code.
 *
If the user-provided function does not return an error code, the sequences
written to outSeqs must be a valid parse of the src buffer. Data corruption may
occur if the parse is not valid. A parse is defined to be valid if the
following conditions hold:
  - The sum of matchLengths and literalLengths is equal to srcSize.
  - All sequences in the parse have matchLength != 0, except for the final
    sequence. matchLength is not constrained for the final sequence.
  - All offsets respect the windowSize parameter as specified in
    doc/zstd_compression_format.md.
 *
zstd will only validate these conditions (and fail compression if they do not
hold) if the ZSTD_c_validateSequences cParam is enabled. Note that sequence
validation has a performance cost.
 *
If the user-provided function returns an error, zstd will either fall back
to an internal matchfinder or fail the compression operation. The user can
choose between the two behaviors by setting the
ZSTD_c_enableMatchFinderFallback cParam. Fallback compression will follow any
other cParam settings, such as compression level, the same as in a normal
compression operation.
 *
The user shall instruct zstd to use a particular ZSTD_externalMatchFinder_F
function by calling ZSTD_registerExternalMatchFinder(cctx, externalMatchState,
externalMatchFinder). This setting will persist until the next parameter reset
of the CCtx.
 *
The externalMatchState must be initialized by the user before calling
ZSTD_registerExternalMatchFinder. The user is responsible for destroying the
externalMatchState.
 *
LIMITATIONS
This API is currently incompatible with long-distance matching. As mentioned
above, history buffers (stream history, dictionaries) are currently not
supported. We plan to remove these limitations in the future.
*** LIMITATIONS ***
External matchfinders are compatible with all zstd compression APIs. There are
only two limitations.
 *
First, the ZSTD_c_enableLongDistanceMatching cParam is not supported.
COMPRESSION WILL FAIL if it is enabled and the user tries to compress with an
external matchfinder.
  - Note that ZSTD_c_enableLongDistanceMatching is auto-enabled by default in
    some cases (see its documentation for details). Users must explicitly set
    ZSTD_c_enableLongDistanceMatching to ZSTD_ps_disable in such cases if an
    external matchfinder is registered.
  - As of this writing, ZSTD_c_enableLongDistanceMatching is disabled by default
    whenever ZSTD_c_windowLog < 128MB, but that's subject to change. Users should
    check the docs on ZSTD_c_enableLongDistanceMatching whenever the external
    matchfinder API is used in conjunction with advanced settings (like windowLog).
 *
Second, history buffers are not supported. Concretely, zstd will always pass
dictSize == 0 to the external matchfinder (for now). This has two implications:
  - Dictionaries are not supported. Compression will *not* fail if the user
    references a dictionary, but the dictionary won't have any effect.
  - Stream history is not supported. All compression APIs, including streaming
    APIs, work with the external matchfinder, but the external matchfinder won't
    receive any history from the previous block. Each block is an independent chunk.
 *
Long-term, we plan to overcome both limitations. There is no technical blocker to
overcoming them. It is purely a question of engineering effort.
